
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "FreeRTOS.h"
#include "task.h"
#include "stdio.h"
#include "string.h"
#include "semphr.h"
#include "stdlib.h"


void Task1_Handler(void *parameters);
void Task2_Handler(void *parameters);


SemaphoreHandle_t xsemaphorekey;

char mymessage[200];
void setup(void);
void gpio_config();
void printMessage(char *message);
void USART_CONFIG();

int main(void)

{

	RCC_DeInit();
	setup();
	SystemCoreClockUpdate();
	vSemaphoreCreateBinary(xsemaphorekey);
	sprintf(mymessage,"demo of mutex with binnary smeaphore \r\n");
	printMessage(mymessage);





	xTaskCreate(Task1_Handler,"Task1",500,NULL,2,NULL);
	xTaskCreate(Task2_Handler,"Task2",500,NULL,2,NULL);
	vTaskStartScheduler();



  while (1)
  {
  }
}

void Task1_Handler(void *parameters){
	const char* pvtaskname="task1 is running \r\n";
	while(1){
		xSemaphoreTake(xsemaphorekey,portMAX_DELAY);
		sprintf(mymessage,"%s",pvtaskname);
		printMessage(mymessage);
		xSemaphoreGive(xsemaphorekey);
		vTaskDelay(pdMS_TO_TICKS(500));
	}


}


void Task2_Handler(void *parameters){
	const char* pvtaskname="task2 is running \r\n";
	while(1){
		xSemaphoreTake(xsemaphorekey,portMAX_DELAY);
		sprintf(mymessage,"%s",pvtaskname);
		printMessage(mymessage);
		xSemaphoreGive(xsemaphorekey);
		vTaskDelay(pdMS_TO_TICKS(500));

}
}

void printMessage(char *message){


 for( int i =0;i<strlen(message);i++){
	 while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) !=SET);
	 USART_SendData(USART2,message[i]);
 }
}


void setup(void){

	gpio_config();
	USART_CONFIG();

}


void USART_CONFIG(){
 RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 USART_InitTypeDef usart_structure ;
 memset(&usart_structure,0,sizeof(usart_structure));
 usart_structure.USART_BaudRate=115200;
 usart_structure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 usart_structure.USART_Mode= USART_Mode_Tx|USART_Mode_Rx ;
 usart_structure.USART_Parity = USART_Parity_No;
 usart_structure.USART_StopBits= USART_StopBits_1 ;
 usart_structure.USART_WordLength=USART_WordLength_8b ;

 USART_Init(USART2,&usart_structure);

 USART_Cmd(USART2,ENABLE);


}
void gpio_config(){

	GPIO_InitTypeDef GPIO_Initstrcture= {0} ;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);




	GPIO_Initstrcture.GPIO_Mode=GPIO_Mode_AF;
	GPIO_Initstrcture.GPIO_Pin =GPIO_Pin_2|GPIO_Pin_3 ;
	GPIO_Initstrcture.GPIO_OType= GPIO_OType_PP;
	GPIO_Initstrcture.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Initstrcture.GPIO_Speed=GPIO_Speed_50MHz;

	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);

	GPIO_Init(GPIOA,&GPIO_Initstrcture);
}

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){

  return;
}


uint16_t EVAL_AUDIO_GetSampleCallBack(void){

  return -1;
}
