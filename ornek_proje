#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "FreeRTOS.h"
#include "task.h"
#include "stdio.h"



TaskHandle_t my_buttonTaskHandle = NULL;
TaskHandle_t my_ledTaskHandle = NULL;
uint8_t count = 0 ;

void read_button_State_task();
void led_task_flash();
void setup_config(void);
void gpio_input_config(void);
void gpio_output_config(void);

int main(void)
{
	// 1.adým sitem saati dahili olarak ayarlandý haricciyi kapattýk
	RCC_DeInit();// HSI ON | HSE OFF PLL OFF/ SystmClock 16 Mhz

	SystemCoreClockUpdate(); // system core clock deðerini 16 ayarladýk

	setup_config();

	xTaskCreate(read_button_State_task,"read_button_State_task",130,NULL,3,&my_buttonTaskHandle);// hafýzanýn çok da kullanýlmayacaðý için en küçük alaný verdik
	xTaskCreate(led_task_flash,"led_task_flash",130,NULL,3,&my_ledTaskHandle);


	vTaskStartScheduler();
  while (1)
  {

  }
}

void read_button_State_task(void *params){

	while(1){
		if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)==Bit_SET)
		{
			while(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)==Bit_SET);
			count++;
			if (count==5){
			count=0;
			}
		}

	}
}


void led_task_flash(void *params){

	while(1){
		if(count==0){
			GPIO_ResetBits(GPIOD,GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15);
		}
		else if(count==1){
			GPIO_ToggleBits(GPIOD,GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15);
			vTaskDelay(1000);
				}

		else if(count==2){
			GPIO_ToggleBits(GPIOD,GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15);
			vTaskDelay(750);
				}
		else if(count==3){
			GPIO_ToggleBits(GPIOD,GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15);
			vTaskDelay(500);
				}
		else if(count==4){
			GPIO_ToggleBits(GPIOD,GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15);
			vTaskDelay(250);

				}
	}

}
void setup_config(void){

	gpio_input_config();
	gpio_output_config();
}
void gpio_input_config(void){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
	GPIO_InitTypeDef GPIO_Initstrcture= {0} ;
	GPIO_Initstrcture.GPIO_Mode=GPIO_Mode_IN;
	GPIO_Initstrcture.GPIO_Pin =GPIO_Pin_0;
	GPIO_Initstrcture.GPIO_OType= GPIO_OType_PP;
	GPIO_Initstrcture.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Initstrcture.GPIO_Speed=GPIO_Speed_100MHz;

	GPIO_Init(GPIOA,&GPIO_Initstrcture);
}



void gpio_output_config(void){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
	GPIO_InitTypeDef GPIO_Initstrcture= {0} ;
	GPIO_Initstrcture.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_Initstrcture.GPIO_Pin =GPIO_Pin_12 |GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15 ;
	GPIO_Initstrcture.GPIO_OType= GPIO_OType_PP;
	GPIO_Initstrcture.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Initstrcture.GPIO_Speed=GPIO_Speed_100MHz;

	GPIO_Init(GPIOD,&GPIO_Initstrcture);
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){

  return;
}


uint16_t EVAL_AUDIO_GetSampleCallBack(void){

  return -1;
}
