
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "FreeRTOS.h"
#include "task.h"
#include "stdio.h"
#include "string.h"


char mymessage[200];
uint8_t button_state= 0;

int _write(int32_t file, uint8_t *ptr,int32_t len)
{
	for( int i =0; i<len; i++)
		ITM_SendChar((*ptr++));

	return len;
}

TaskHandle_t myTaskHandle = NULL;
TaskHandle_t myTask2Handle = NULL;
void Task1_Handler(void *params);
void Task2_Handler(void *params);


void setup(void);
void gpio_config();
void USART_CONFIG(void);
void exti_interrupt(void);
void printMassage(char *message);
void EXTI0_IRQHandler(void);// void yazýlýnca parametre almaz

void EXTI0_IRQHandler(void){
	EXTI_ClearITPendingBit(EXTI_Line0);
	if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)==Bit_SET)
	{
		button_state=0;
	}
}
int main(void)
{

	RCC_DeInit();
	setup();
	SystemCoreClockUpdate();
  	xTaskCreate(Task1_Handler,"Task1",130,NULL,4,&myTaskHandle);
	xTaskCreate(Task2_Handler,"Task2",130,NULL,2,&myTask2Handle);

	vTaskStartScheduler();
  while (1)
  {

  }
}

void Task1_Handler(void *params){

	UBaseType_t p1,p2;
	sprintf(mymessage,"Task1 is running\r\n");
	printMessage(mymessage);
	sprintf(mymessage,"task1 onceligi: %d \r\n",uxTaskPriorityGet(myTaskHandle));
	printMessage(mymessage);

	printMessage(mymessage);
	 while (1)
	  {
		 if(button_state==1){
			 button_state=0;
			 p1=uxTaskPriorityGet(myTaskHandle);
			 p2=uxTaskPriorityGet(myTask2Handle);

			 vTaskPrioritySet(myTaskHandle,p2);
			 vTaskPrioritySet(myTask2Handle,p1);

		 }


		 //taskYIELD();
	  }
}

void Task2_Handler(void *params){
	UBaseType_t p1,p2;
	sprintf(mymessage,"Task2 is running\r\n");
	printMessage(mymessage);
	sprintf(mymessage,"task2 onceligi: %d \r\n",uxTaskPriorityGet(myTask2Handle));
	printMessage(mymessage);

	 while (1)
	  {
		 if(button_state==1){

		 button_state=0;
		 p1=uxTaskPriorityGet(myTaskHandle);
		 p2=uxTaskPriorityGet(myTask2Handle);

		 vTaskPrioritySet(myTaskHandle,p2);
		 vTaskPrioritySet(myTask2Handle,p1);

		 }

	  }

}

void printMessage(char *message){//  *message bu ifade messagenin adresini parametre olarak aldýðýný ifade ediyor

 for( int i =0;i<strlen(message);i++){
	 while(USART_GetFlagStatus(USART2,USART_FLAG_TXE) !=SET);
	 USART_SendData(USART2,message[i]);
 }

}
void setup(void){
	gpio_config();
	USART_CONFIG();
	exti_interrupt();
}
void USART_CONFIG(){
 RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 USART_InitTypeDef usart_structure ;
 memset(&usart_structure,0,sizeof(usart_structure));
 usart_structure.USART_BaudRate=115200;
 usart_structure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 usart_structure.USART_Mode= USART_Mode_Tx ;
 usart_structure.USART_Parity = USART_Parity_No;
 usart_structure.USART_StopBits= USART_StopBits_1 ;
 usart_structure.USART_WordLength=USART_WordLength_8b ;

 USART_Init(USART2,&usart_structure);
 USART_Cmd(USART2,ENABLE);

}
void gpio_config(){

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);


		GPIO_InitTypeDef GPIO_Initstrcture= {0} ;
		GPIO_Initstrcture.GPIO_Mode=GPIO_Mode_IN;
		GPIO_Initstrcture.GPIO_Pin =GPIO_Pin_0;
		GPIO_Initstrcture.GPIO_OType= GPIO_OType_PP;
		GPIO_Initstrcture.GPIO_PuPd = GPIO_PuPd_NOPULL;
		GPIO_Initstrcture.GPIO_Speed=GPIO_Speed_100MHz;
		GPIO_Init(GPIOA,&GPIO_Initstrcture);

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0); // exti pin0 tanýmladýk


	GPIO_Initstrcture.GPIO_Mode=GPIO_Mode_AF;
	GPIO_Initstrcture.GPIO_Pin =GPIO_Pin_2|GPIO_Pin_3 ;
	GPIO_Initstrcture.GPIO_OType= GPIO_OType_PP;
	GPIO_Initstrcture.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Initstrcture.GPIO_Speed=GPIO_Speed_100MHz;

	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);

	GPIO_Init(GPIOA,&GPIO_Initstrcture);
}

void exti_interrupt(void){

RCC_APB2PeriphClockCmd(  RCC_APB2Periph_SYSCFG,ENABLE);
EXTI_InitTypeDef exti_init_structure ={0};
exti_init_structure.EXTI_Line=0;// o. pin ile ilgili olduðu için 0 seçtik
exti_init_structure.EXTI_LineCmd=ENABLE;
exti_init_structure.EXTI_Mode=EXTI_Mode_Interrupt;
exti_init_structure.EXTI_Trigger=EXTI_Trigger_Rising;

EXTI_Init(&exti_init_structure);
NVIC_SetPriority(EXTI0_IRQn,2);//öncelik deðeri verdik
NVIC_EnableIRQ(EXTI0_IRQn);

}
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){

  return;
}


uint16_t EVAL_AUDIO_GetSampleCallBack(void){

  return -1;
}
