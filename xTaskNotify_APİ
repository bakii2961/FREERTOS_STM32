#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "FreeRTOS.h"
#include "task.h"
#include "stdio.h"



TaskHandle_t my_buttonTaskHandle = NULL;
TaskHandle_t my_ledTaskHandle = NULL;
uint8_t count = 0 ;

void read_button_State_task();

void setup_config(void);
void gpio_input_config(void);
void gpio_output_config(void);
void delay_freertos(uint32_t delayMS);

void led_task_flash(void *params);

int main(void)
{

	RCC_DeInit();

	SystemCoreClockUpdate();
	setup_config();

	xTaskCreate(read_button_State_task,"read_button_State_task",750,NULL,2,&my_buttonTaskHandle);
	xTaskCreate(led_task_flash,"led_task_flash",750,NULL,2,&my_ledTaskHandle);


	vTaskStartScheduler();
  while (1)
  {

  }
}

void read_button_State_task(void *params){

	while(1){
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)==Bit_SET)
		{	delay_freertos(100);
			xTaskNotify(my_ledTaskHandle,0x00,eIncrement);// birer birer artýrmasý için eIncrement kullandýk


		}


	}
}


void led_task_flash(void *params){

	while(1){
uint32_t pulNatification =0;
		if(xTaskNotifyWait(0,0,&pulNatification,portMAX_DELAY)==pdTRUE){
			GPIO_ToggleBits(GPIOD,GPIO_Pin_12 |GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15);
			uint32_t deger = pulNatification; // pulNatification bu zaten kaç kere basýldýðýný teker teker yükselmesi ile buraya yollanan kýsým olsuðu için kaç adet basýþ olduðunu görebiliriz

		}

	}

}

void setup_config(void){

	gpio_input_config();
	gpio_output_config();
}
void gpio_input_config(void){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);

	GPIO_InitTypeDef GPIO_Initstrcture= {0} ;
	GPIO_Initstrcture.GPIO_Mode=GPIO_Mode_IN;
	GPIO_Initstrcture.GPIO_Pin =GPIO_Pin_0;
	GPIO_Initstrcture.GPIO_OType= GPIO_OType_PP;
	GPIO_Initstrcture.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Initstrcture.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOA,&GPIO_Initstrcture);
}



void gpio_output_config(void){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
	GPIO_InitTypeDef GPIO_Initstrcture= {0} ;

	//NVIC_InitTypeDef
	GPIO_Initstrcture.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_Initstrcture.GPIO_Pin =GPIO_Pin_12 |GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15 ;
	GPIO_Initstrcture.GPIO_OType= GPIO_OType_PP;
	GPIO_Initstrcture.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Initstrcture.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOD,&GPIO_Initstrcture);


}
void delay_freertos(uint32_t delayMS)
{

	uint32_t anlik_tick=xTaskGetTickCount();  // þu anki tick deðeri
	uint32_t delayTick = pdMS_TO_TICKS(delayMS);// ms cinsinden girdiðim deðerin karþýlýðý

	while(xTaskGetTickCount()< (anlik_tick+delayTick));

}

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){

  return;
}


uint16_t EVAL_AUDIO_GetSampleCallBack(void){

  return -1;
}
